#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Jan 15, 2022 10:46:10 PM CST  platform: Windows NT
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import tkinter.filedialog 
from scipy.interpolate import interp1d
from matplotlib.pyplot import hist,boxplot,show
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
import pandas as pd
import Bathymetry_gui


def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = Bathymetry_gui.Toplevel1(_top1)
    root.mainloop()

#選擇輸出檔案
def output(*args):
    global outpath
    outpath = tk.filedialog.askopenfilename()
    _w1.outpath.set(outpath)
    print(outpath)
    _w1.progess.set('open {}'.format(outpath))
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

#選擇輸入檔案(GGA)
def Gselect_file(*arg):
    global GGAPath
    ftypes =  [('GPS files', '*.GGA'),('All files', '*')]
    path = tk.filedialog.askopenfilename(filetypes = ftypes,initialdir='../',initialfile='161201N.GGA')
    GGAPath=path
    print(path)
    _w1.errorM.set('None')
    _w1.progess.set('open {}'.format(path))

#選擇輸入檔案(HVE)
def Hselect_file(*arg):
    global HVEPath
    ftypes =  [('HVE files', '*.hve'),('All files', '*')]
    path = tk.filedialog.askopenfilename(filetypes = ftypes,initialdir='../',initialfile='161201.HVE')
    HVEPath=path
    print(path)
    _w1.errorM.set('None')
    _w1.progess.set('open {}'.format(path))

#選擇輸入檔案(SB)
def Sselect_file(*arg):
    global SBPath
    ftypes =  [('SingleBeam files', '*.sb'),  ('All files', '*')]
    path = tk.filedialog.askopenfilename(filetypes = ftypes,initialdir='../',initialfile='161201.SB')
    SBPath=path
    print(path)
    _w1.errorM.set('None')
    _w1.progess.set('open {}'.format(path))

#圖表輸出畫布(初始化)
canvas1,canvas2,canvas3=None,None,None

def execute():
    global canvas1,canvas2,canvas3
    _w1.errorM.set('None')
    _w1.progess.set('Running...')
    
    #讀入資料，轉為dataframe
    try:
        df_hve = pd.read_csv(HVEPath,header=None,usecols=[0,1],names=["time", "depth_corr"])
        df_sb = pd.read_csv(SBPath,header=None,usecols=[0,1],names=["time", "depth"])
        df_gga = pd.read_csv(GGAPath,header=None,usecols=[0,1,2],names=["time","N","E"])
    except:
        _w1.errorM.set('請先載入資料')
    
    #內插出 位置對時間的函數
    func_gga = interp1d(df_gga["time"],[df_gga["N"],df_gga["E"]],fill_value="interpolate")
    #剃除無法內插的資料(超出時間範圍)
    df_sb=df_sb[(df_sb["time"]<df_gga["time"].max())&(df_sb["time"]>df_gga["time"].min())]
    #內插出各測深時刻的位置
    df_sb["N"],df_sb["E"] = func_gga(df_sb["time"])
    
    #內插出 水深改正對時間的函數
    func_hve = interp1d(df_hve["time"],df_hve["depth_corr"],fill_value="interpolate")
    #剃除無法內插的資料(超出時間範圍)
    df_sb=df_sb[(df_sb["time"]<df_hve["time"].max())&(df_sb["time"]>df_hve["time"].min())]
    #內插出各測深時刻的水深改正值
    df_sb["depth_corr"] = func_hve(df_sb["time"])
    
    df = pd.concat([df_hve,df_sb,df_gga])

    #水深改正向上為正 測深資料向下為正 改正後水深為兩者相減
    df["H"] = -df["depth"]+df["depth_corr"]
    df.dropna(subset = ["H"], inplace=True)
    
    df.sort_values(by=["time"],inplace=True)
    raw_data=len(df)
    
    #讀入使用者輸入的水深範圍
    try:
        minD=float(_w1.minD.get());MaxD=float(_w1.maxD.get())
        if minD>MaxD:
            _w1.errorM.set('水深範圍不存在')
    except:
        _w1.errorM.set('水深範圍必須為數字')
    
    #以使用者輸入的水深範圍過濾資料(剔除範圍外的資料)
    df=df[(df['H']<-minD)&(df['H']>-MaxD)]
    
    #紀錄測深作業所經過的時間(分鐘)
    df["Minute"]=(df['time']-df['time'].min())*24*60
    
    _w1.progess.set('{}\nWriting...'.format(_w1.progess.get()))
    
    #顯示剃除的資料比例(%)
    _w1.droped.set(100-len(df)/raw_data*100)
    
    #寫入輸出檔案
    outpath=_w1.outpath.get()
    df_out=df[['E','N','H']]
    df.round({'H': 2})
    df_out.to_csv(outpath, index = False)
    
    _w1.progess.set('{}\nDrawing...'.format(_w1.progess.get()))
    #繪製水深直方圖、盒鬚圖
    _w1.progess.set('{}\nDrawing Histogram...'.format(_w1.progess.get()))
    g= Figure(figsize=(15,12), dpi=100)
    ax = g.add_subplot(111)
    ax.hist(df["H"],bins=np.arange(df["H"].min(), df["H"].max(), 0.25))
    ax = g.add_subplot(6,1,1)
    ax.axis('off')
    ax.boxplot(df["H"],vert=False,patch_artist=True,showmeans=True,meanprops=dict(markerfacecolor='green', marker='D'))
    if canvas1:canvas1.get_tk_widget().pack_forget()
    canvas1 = FigureCanvasTkAgg(g,master=_w1.Canvas1)
    canvas1.get_tk_widget().pack(fill="both", expand="yes")
    canvas1.draw()
    
    #繪製3D點雲
    _w1.progess.set('{}\nDrawing 3D point cloud...'.format(_w1.progess.get()))
    f= Figure(figsize=(30,12), dpi=50)
    ax_f = f.gca(projection='3d')
    ax_f.view_init(20, 100)
    ax_f.set_box_aspect((2, 2, 0.5))
    sc=ax_f.scatter(df["E"], df["N"], df["H"] , c=df["H"] , cmap='jet')
    #f.colorbar(sc,ax=ax_f)
    if canvas2:canvas2.get_tk_widget().pack_forget()
    canvas2 = FigureCanvasTkAgg(f,master=_w1.Canvas2)
    canvas2.get_tk_widget().pack()
    canvas2.draw()
   
   #繪製航跡圖(以時間上色)
    _w1.progess.set('{}\nDrawing GPX...'.format(_w1.progess.get()))
    h= Figure(figsize=(15,12), dpi=50)
    ax_h = h.gca()
    gpx=ax_h.scatter(df["E"], df["N"],c=df["Minute"],cmap='jet')
    clb=h.colorbar(gpx,ax=ax_h)
    clb.ax.set_title('(minute)',fontsize=8)
    if canvas3:canvas3.get_tk_widget().pack_forget()
    canvas3 = FigureCanvasTkAgg(h,master=_w1.Canvas3)
    canvas3.get_tk_widget().pack()
    canvas3.draw()   
    
    _w1.progess.set('{}\nFinish!!'.format(_w1.progess.get()))
    
    print('ok')
    
    _top1.mainloop()
    
if __name__ == '__main__':
    Bathymetry_gui.start_up()




